<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="little_laugh" id="1" localization="8" tooltip="small laugh after hearing your pet name&#x0A;" x="62" y="14"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="50" size="50"><BehaviorLayer name="sound"><BehaviorKeyframe name="keyframe9" index="9"><Diagram><Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="152" y="62"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" /><Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../../sounds/Enu_Ono_Laugh_Happy_2_pitch_115.ogg" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" /><Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" /><Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" /><Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" /><Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" /><Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" /><Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" /><Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" /></Box><Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self):
        self.onStopped(self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("File name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" /></Box><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="tablet"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Chest+BG" id="16" localization="8" tooltip="-" x="134" y="63"><bitmap>media/images/box/world_representation/world_rep.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="time" inherits_from_parent="0" content_type="1" value="1000" default_value="1000" min="0" max="10000" tooltip="animation delay" id="4" /><Parameter name="animation" inherits_from_parent="0" content_type="3" value="easeInCirc" default_value="easeInOutBounce" custom_choice="0" tooltip="transition type" id="5"><Choice value="easeInQuad" /><Choice value="easeOutQuad" /><Choice value="easeInOutQuad" /><Choice value="easeInCubic" /><Choice value="easeOutCubic" /><Choice value="easeInOutCubic" /><Choice value="easeInQuart" /><Choice value="easeOutQuart" /><Choice value="easeInOutQuart" /><Choice value="easeInQuint" /><Choice value="easeOutQuint" /><Choice value="easeInOutQuint" /><Choice value="easeInSine" /><Choice value="easeOutSine" /><Choice value="easeInOutSine" /><Choice value="easeInExpo" /><Choice value="easeOutExpo" /><Choice value="easeInOutExpo" /><Choice value="easeInCirc" /><Choice value="easeOutCirc" /><Choice value="easeInOutCirc" /><Choice value="easeInElastic" /><Choice value="easeOutElastic" /><Choice value="easeInOutElastic" /><Choice value="easeInBack" /><Choice value="easeOutBack" /><Choice value="easeInOutBack" /><Choice value="easeInBounce" /><Choice value="easeOutBounce" /><Choice value="easeInOutBounce" /></Parameter><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Chest+BG" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="285" y="31"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")
        self.mem = ALProxy("ALMemory")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        import qi
        hexcolor = "#%02x%02x%02x" % (p[0], p[1], p[2])
        self.mem.raiseEvent("template/changeBGColor", [hexcolor, self.getParameter("time"), self.getParameter("animation")])
        qi.async(self.onStopped, delay=int(self.getParameter("time")))

        """Fade the chest Led you have chosen to the color you have chosen with the duration you have chosen!"""
        id = self.leds.post.fadeRGB("ChestLeds", 256*256*p[0] + 256*p[1] + p[2], self.getParameter("time") / 1000.0)
        self.ids.append(id)
        self.leds.wait(id, 0)
        try :
            self.ids.remove(id)
        except :
            pass
        if( self.ids == [] ):
            self.onStopped() # activate output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="colors" id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="time" inherits_from_parent="1" content_type="1" value="1754" default_value="1000" min="0" max="10000" tooltip="animation delay" id="4" /><Parameter name="animation" inherits_from_parent="1" content_type="3" value="easeOutQuad" default_value="easeInOutBounce" custom_choice="0" tooltip="transition type" id="5"><Choice value="easeInQuad" /><Choice value="easeOutQuad" /><Choice value="easeInOutQuad" /><Choice value="easeInCubic" /><Choice value="easeOutCubic" /><Choice value="easeInOutCubic" /><Choice value="easeInQuart" /><Choice value="easeOutQuart" /><Choice value="easeInOutQuart" /><Choice value="easeInQuint" /><Choice value="easeOutQuint" /><Choice value="easeInOutQuint" /><Choice value="easeInSine" /><Choice value="easeOutSine" /><Choice value="easeInOutSine" /><Choice value="easeInExpo" /><Choice value="easeOutExpo" /><Choice value="easeInOutExpo" /><Choice value="easeInCirc" /><Choice value="easeOutCirc" /><Choice value="easeInOutCirc" /><Choice value="easeInElastic" /><Choice value="easeOutElastic" /><Choice value="easeInOutElastic" /><Choice value="easeInBack" /><Choice value="easeOutBack" /><Choice value="easeInOutBack" /><Choice value="easeInBounce" /><Choice value="easeOutBounce" /><Choice value="easeInOutBounce" /></Parameter></Box><Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="104" y="34"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 85, 255])]]></content></script><pluginContent><color>#ff55ff</color></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" /><Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" /></Box><Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="3" /><Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="16" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe49" index="49"><Diagram><Box name="Chest+BG" id="16" localization="8" tooltip="-" x="202" y="73"><bitmap>media/images/box/world_representation/world_rep.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="time" inherits_from_parent="0" content_type="1" value="1000" default_value="1000" min="0" max="10000" tooltip="animation delay" id="4" /><Parameter name="animation" inherits_from_parent="0" content_type="3" value="easeInCirc" default_value="easeInOutBounce" custom_choice="0" tooltip="transition type" id="5"><Choice value="easeInQuad" /><Choice value="easeOutQuad" /><Choice value="easeInOutQuad" /><Choice value="easeInCubic" /><Choice value="easeOutCubic" /><Choice value="easeInOutCubic" /><Choice value="easeInQuart" /><Choice value="easeOutQuart" /><Choice value="easeInOutQuart" /><Choice value="easeInQuint" /><Choice value="easeOutQuint" /><Choice value="easeInOutQuint" /><Choice value="easeInSine" /><Choice value="easeOutSine" /><Choice value="easeInOutSine" /><Choice value="easeInExpo" /><Choice value="easeOutExpo" /><Choice value="easeInOutExpo" /><Choice value="easeInCirc" /><Choice value="easeOutCirc" /><Choice value="easeInOutCirc" /><Choice value="easeInElastic" /><Choice value="easeOutElastic" /><Choice value="easeInOutElastic" /><Choice value="easeInBack" /><Choice value="easeOutBack" /><Choice value="easeInOutBack" /><Choice value="easeInBounce" /><Choice value="easeOutBounce" /><Choice value="easeInOutBounce" /></Parameter><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Chest+BG" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="285" y="31"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.ids = []
        self.leds = ALProxy("ALLeds")
        self.mem = ALProxy("ALMemory")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        import qi
        hexcolor = "#%02x%02x%02x" % (p[0], p[1], p[2])
        self.mem.raiseEvent("template/changeBGColor", [hexcolor, self.getParameter("time"), self.getParameter("animation")])
        qi.async(self.onStopped, delay=int(self.getParameter("time")))

        """Fade the chest Led you have chosen to the color you have chosen with the duration you have chosen!"""
        id = self.leds.post.fadeRGB("ChestLeds", 256*256*p[0] + 256*p[1] + p[2], self.getParameter("time") / 1000.0)
        self.ids.append(id)
        self.leds.wait(id, 0)
        try :
            self.ids.remove(id)
        except :
            pass
        if( self.ids == [] ):
            self.onStopped() # activate output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="colors" id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /><Parameter name="time" inherits_from_parent="1" content_type="1" value="1754" default_value="1000" min="0" max="10000" tooltip="animation delay" id="4" /><Parameter name="animation" inherits_from_parent="1" content_type="3" value="easeOutQuad" default_value="easeInOutBounce" custom_choice="0" tooltip="transition type" id="5"><Choice value="easeInQuad" /><Choice value="easeOutQuad" /><Choice value="easeInOutQuad" /><Choice value="easeInCubic" /><Choice value="easeOutCubic" /><Choice value="easeInOutCubic" /><Choice value="easeInQuart" /><Choice value="easeOutQuart" /><Choice value="easeInOutQuart" /><Choice value="easeInQuint" /><Choice value="easeOutQuint" /><Choice value="easeInOutQuint" /><Choice value="easeInSine" /><Choice value="easeOutSine" /><Choice value="easeInOutSine" /><Choice value="easeInExpo" /><Choice value="easeOutExpo" /><Choice value="easeInOutExpo" /><Choice value="easeInCirc" /><Choice value="easeOutCirc" /><Choice value="easeInOutCirc" /><Choice value="easeInElastic" /><Choice value="easeOutElastic" /><Choice value="easeInOutElastic" /><Choice value="easeInBack" /><Choice value="easeOutBack" /><Choice value="easeInOutBack" /><Choice value="easeInBounce" /><Choice value="easeOutBounce" /><Choice value="easeInOutBounce" /></Parameter></Box><Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="104" y="34"><bitmap>media/images/box/interaction/vocabulary.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 255, 255])]]></content></script><pluginContent><color>#ffffff</color></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" /><Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" /></Box><Link inputowner="0" indexofinput="3" outputowner="1" indexofoutput="3" /><Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="16" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe></BehaviorLayer><ActuatorList model=""><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="15" value="-18.1" /><Key frame="26" value="-5.5" /><Key frame="31" value="-11.2879" /><Key frame="36" value="-8.90413" /><Key frame="49" value="-18.5" /><Key frame="50" value="-18.5" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="26" value="-2.63671" /><Key frame="50" value="-2.63675" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="20" value="-15.5358" smooth="1" symmetrical="1"><Tangent side="left" interpType="bezier" abscissaParam="-1.48839" ordinateParam="-0.245203" /><Tangent side="right" interpType="bezier" abscissaParam="9.06425" ordinateParam="1.49329" /></Key><Key frame="49" value="-12.5135" /><Key frame="50" value="-12.5237" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="20" value="-0.0878909" /><Key frame="50" value="-0.0878258" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="50" value="7.97873" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="19" value="-83.4082" /><Key frame="50" value="-82.1355" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="19" value="-56.7774" /><Key frame="50" value="-56.7774" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="19" value="0.53" /><Key frame="48" value="0.22" /><Key frame="50" value="0.22" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="19" value="7.73437" /><Key frame="50" value="7.73441" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="19" value="5.88868" /><Key frame="50" value="5.88872" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="19" value="-16.8776" /><Key frame="48" value="-38.1" /><Key frame="50" value="-38.1" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="23" value="85.6055" /><Key frame="50" value="85.6055" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="23" value="29.9707" /><Key frame="50" value="29.9707" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="23" value="0.14" /><Key frame="50" value="0.23" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="23" value="-19.3359" /><Key frame="50" value="-19.3359" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="23" value="-14.4141" /><Key frame="50" value="-14.4141" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="23" value="78.4849" /><Key frame="50" value="78.4849" /></ActuatorCurve></ActuatorList></Timeline></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>